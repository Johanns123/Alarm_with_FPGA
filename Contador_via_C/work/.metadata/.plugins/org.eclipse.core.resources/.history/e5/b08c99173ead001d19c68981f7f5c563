/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"
#include "unistd.h"
#include "sys/alt_alarm.h"
#include <stdint.h>
#include <stdbool.h>

#define LOCAL1	0
#define LOCAL2	1
#define LOCAL3	2
#define LOCAL4	3
#define OFF_MODE 0
#define ON_MODE  1
#define BLYNK_200MS 2
#define BLYNK_500MS 3

#define PORT(base)			IORD_ALTERA_AVALON_PIO_DATA(base)
#define LAT(base, data)		IOWR_ALTERA_AVALON_PIO_DATA(base, data)

int8_t position = 0, mode = 0, data, dado1 = 0, dado2 = 0, dado3 = 0, dado4 = 0;
bool start = 0;
bool counter_finish = 1;
bool contando = 0;

void f_timer1(void);
void f_timer2(void);
void setup(void);
void loop(void);
void show_disp(uint8_t dado, uint8_t local, uint8_t modo);
void read_keys(void);
void set_alarm(void);
void start_counter(void);

//f_timer1

alt_u32 max_f1;
alt_alarm cont_f1;

alt_u32 f1_interrupt(void* context) {

	f_timer1();

	return max_f1;
}

//f_timer2

alt_u32 max_f2;
alt_alarm cont_f2;

alt_u32 f2_interrupt(void* context) {

	f_timer2();

	return max_f2;
}

int main()
{ 
	setup();
	/* Event loop never exits. */
	while (1) loop();

	return 0;
}

void setup(void)
{
	alt_putstr("Hello from Nios II!\n");
	max_f1 = alt_ticks_per_second() * 0.001; //10ms
	alt_alarm_start(&cont_f1, max_f1, f1_interrupt, "NULL");
	max_f2 = alt_ticks_per_second(); //1s
	alt_alarm_start(&cont_f2, max_f2, f2_interrupt, "NULL");

}

void loop(void)
{
}

void f_timer1(void)
{
	read_keys();
	if(!start)
		set_alarm();
}

void f_timer2(void)
{
	static uint8_t contador = 0;

	if(start)
	{
		start_counter();
		if(!counter_finish)
		{
			LAT(LED_YELLOW_BASE, contador);
			contador++;
		}
		else
		{
			contador = 0;
			LAT(LED_YELLOW_BASE, contador);
		}
	}
}

void show_disp(uint8_t dado, uint8_t local, uint8_t modo)
{
	LAT(ENABLE_BASE, 1);
	LAT(DADO_BASE, dado);
	LAT(LOCAL_BASE, local);
	LAT(MODO_BASE, modo);
	LAT(ENABLE_BASE, 0);
}

void read_keys(void)
{
	static alt_u8 dado = 0, key1, m_key1 = 1, key2 = 0, m_key2 = 1, key3 = 0, m_key3 = 1, key4 = 0, m_key4 = 1;;

	dado = PORT(KEY_BASE);

	if(dado & 1)
	{
		key1 = 1;
	}

	else
	{
		key1 = 0;
	}

	if(dado & 2)
	{
		key2 = 1;
	}

	else
	{
		key2 = 0;
	}

	if(dado & 4)
	{
		key3 = 1;
	}

	else
	{
		key3 = 0;
	}

	if(dado & 8)
	{
		key4 = 1;
	}

	else
	{
		key4 = 0;
	}

	if(key1 < m_key1)
	{
		if(!contando)
		{
			start = 1;
			contando = 1;
			counter_finish = 0;
			mode = ON_MODE;
			switch(position)
			{
				case LOCAL1:
					dado1 = data;
					break;

				case LOCAL2:
					dado2 = data;
					break;

				case LOCAL3:
					dado3 = data;
					break;

				case LOCAL4:
					dado4 = data;
					break;
			}
		}

		else
		{
			data = position = mode = 0;
			start = 0;
			contando = 0;
		}
	}

	if(key2 < m_key2)
	{
		if(!contando)
		{
			start = 0;
			LAT(LED_YELLOW_BASE, position);
			switch(position)
			{
				case LOCAL1:
					dado1 = data;
					data = 0;
					position = LOCAL2;
					break;

				case LOCAL2:
					dado2 = data;
					data = 0;
					position = LOCAL3;
					break;

				case LOCAL3:
					dado3 = data;
					data = 0;
					position = LOCAL4;
					break;

				case LOCAL4:
					dado4 = data;
					data = 0;
					position = LOCAL1;
					break;
			}
		}
	}

	if(key3 < m_key3)
	{
		if(!contando)
		{
			start = 0;
			data--;
			switch(position)
			{
				case LOCAL1:
					if(data < 0) data = 9;
					break;

				case LOCAL2:
					if(data < 0) data = 5;
					break;

				case LOCAL3:
					if(data < 0) data = 9;
					break;

				case LOCAL4:
					if(data < 0) data = 5;
					break;
			}
			LAT(LED_YELLOW_BASE, data);
		}
	}

	if(key4 < m_key4)
	{
		if(!contando)
		{
			start = 0;
			data++;
			switch(position)
			{
				case LOCAL1:
					if(data > 9) data = 0;
					break;

				case LOCAL2:
					if(data > 5) data = 0;
					break;

				case LOCAL3:
					if(data > 9) data = 0;
					break;

				case LOCAL4:
					if(data > 5) data = 0;
					break;
			}
			LAT(LED_YELLOW_BASE, data);
		}
	}

	m_key1 = key1;
	m_key2 = key2;
	m_key3 = key3;
	m_key4 = key4;
}
void set_alarm(void)
{
	mode = BLYNK_500MS;
	switch(position)
	{
		case LOCAL1:
			show_disp(data,  position, mode);
			show_disp(dado2, LOCAL2, ON_MODE);
			show_disp(dado3, LOCAL3, ON_MODE);
			show_disp(dado4, LOCAL4, ON_MODE);
			break;

		case LOCAL2:
			show_disp(dado1, LOCAL1, ON_MODE);
			show_disp(data,  position, mode);
			show_disp(dado3, LOCAL3, ON_MODE);
			show_disp(dado4, LOCAL4, ON_MODE);
			break;

		case LOCAL3:
			show_disp(dado1, LOCAL1, ON_MODE);
			show_disp(dado2, LOCAL2, ON_MODE);
			show_disp(data,  position , mode);
			show_disp(dado4, LOCAL4, ON_MODE);
			break;

		case LOCAL4:
			show_disp(dado1, LOCAL1, ON_MODE);
			show_disp(dado2, LOCAL2, ON_MODE);
			show_disp(dado3, LOCAL3, ON_MODE);
			show_disp(data, position, mode);
			break;
	}

}

void start_counter(void)
{

	dado1--;
	if(dado1 < 0)
	{
		dado2--;
		dado1 = 9;
	}

	if(dado2 < 0)
	{
		dado3--;
		dado2 = 5;
	}

	if(dado3 < 0)
	{
		dado4--;
		dado3 = 9;
	}

	if(dado4 < 0)
	{
		dado4 = dado3 = dado2 = dado1 = 0;
		counter_finish = 1;
		mode = BLYNK_200MS;
		contando = 0;
	}

	show_disp(dado1, LOCAL1, mode);
	show_disp(dado2, LOCAL2, mode);
	show_disp(dado3, LOCAL3, mode);
	show_disp(dado4, LOCAL4, mode);
}
